{"version":3,"sources":["Components/TodoForm.js","Components/Todo.js","Components/TodoList.js","App.js","index.js"],"names":["TodoForm","props","inputRef","useRef","useEffect","current","focus","useState","edit","text","todo","setTodo","className","onSubmit","e","preventDefault","onAddingTodo","id","Math","random","trim","checkIfUpdate","type","placeholder","onChange","target","value","ref","buttonContent","Todo","setEdit","updateTodo","todos","map","index","isComplete","onClick","completeTodo","removeTodo","TodoList","lists","localStorage","getItem","JSON","parse","getItemFromLocalStorage","setTodos","setItem","stringify","test","newTodo","updatedTodos","AfterRemovingTodo","filter","todoId","newValue","prev","item","App","ReactDOM","render","document","getElementById"],"mappings":"iNA+BeA,EA7BA,SAACC,GAEZ,IAAMC,EAAUC,iBAAO,MAEvBC,qBAAU,WACLF,EAASG,QAAQC,WAEtB,MAAsBC,mBAASN,EAAMO,KAAMP,EAAMO,KAAKC,KAAM,IAA5D,mBAAOC,EAAP,KAAYC,EAAZ,KAcA,OACI,uBAAMC,UAAU,YAAYC,SAVZ,SAACC,GACjBA,EAAEC,iBACFd,EAAMe,aAAa,CACfC,GAAIC,KAAKC,SACTV,KAAMC,EAAKU,SAES,KAArBnB,EAAMoB,eACRV,EAAQ,KAGT,UACE,uBAAOW,KAAK,OAAOC,YAAatB,EAAMsB,YAAaC,SAdhC,SAACV,GACtBH,EAAQG,EAAEW,OAAOC,QAakEA,MAAOhB,EAAME,UAAU,aAAae,IAAKzB,IAC1H,wBAAQU,UAAU,cAAlB,SAAiCX,EAAM2B,oB,eCUlCC,EA/BJ,SAAC5B,GAER,MAAqBM,mBAAS,CAC1BU,GAAI,KACJR,KAAM,KAFV,mBAAOD,EAAP,KAAYsB,EAAZ,KAYA,OAAGtB,EAAKS,GAEG,cAAC,EAAD,CAAUT,KAAMA,EAAMQ,aAVd,SAACU,GAChBzB,EAAM8B,WAAWvB,EAAKS,GAAGS,GACzBI,EAAQ,CACJb,GAAI,KACJR,KAAM,MAM+CY,cAAc,IAAIO,cAAc,cAAcL,YAAY,mBAE/GtB,EAAM+B,MAAMC,KAAI,SAACvB,EAAKwB,GAAN,OACnB,sBAAKtB,UAAWF,EAAKyB,WAAa,oBAAqB,WAAvD,UACG,qBAAmBC,QAAS,kBAAInC,EAAMoC,aAAa3B,EAAKO,KAAxD,SACKP,EAAKD,MADAC,EAAKO,IAGf,sBAAKL,UAAU,QAAf,UACI,cAAC,IAAD,CAAmBA,UAAU,cAAcwB,QAAS,kBAAInC,EAAMqC,WAAW5B,EAAKO,OAC9E,cAAC,IAAD,CAASL,UAAU,YAAYwB,QAAS,kBAAIN,EAAQ,CAACb,GAAIP,EAAKO,GAAIR,KAAMC,EAAKD,eANZyB,OC+ClEK,EAnEA,WAGX,IAUA,EAAuBhC,mBAVO,WAC1B,IAAIiC,EAAOC,aAAaC,QAAQ,SAChC,OAAGF,EAEQG,KAAKC,MAAMJ,GAGX,GAGiBK,IAAhC,mBAAOb,EAAP,KAAac,EAAb,KA6CA,OAJA1C,qBAAU,WACNqC,aAAaM,QAAQ,QAASJ,KAAKK,UAAUhB,MAC/C,CAACA,IAGF,sBAAKpB,UAAU,WAAf,UACK,wDACA,cAAC,EAAD,CAAUI,aA9CK,SAACN,GAClB,GAAIA,EAAKD,OAAM,QAAQwC,KAAKvC,EAAKD,MAAjC,CAKA,IAAMyC,EAAQ,CAACxC,GAAF,mBAAUsB,IACvBc,EAASI,KAuCiCtB,cAAc,WAAWL,YAAY,gBAAgBF,cAAc,MAC3G,cAAC,EAAD,CAAMW,MAAOA,EAAOK,aApCP,SAACpB,GAChB,IAAIkC,EAAcnB,EAAMC,KAAI,SAAAvB,GAKxB,OAJGA,EAAKO,KAAKA,IAETP,EAAKyB,YAAYzB,EAAKyB,YAEnBzB,KAGXoC,EAASK,IA2ByCb,WAvBrC,SAACrB,GACd,IAAMmC,EAAmB,YAAIpB,GAAOqB,QAAO,SAAA3C,GAAI,OAAGA,EAAKO,KAAOA,KAC9D6B,EAASM,IAqBiErB,WAjB7D,SAACuB,EAAQC,GAClBA,EAAS9C,OAAM,QAAQwC,KAAKM,EAAS9C,OAKzCqC,GAAS,SAAAU,GAAI,OAAGA,EAAKvB,KAAI,SAAAwB,GAAI,OAAGA,EAAKxC,KAAKqC,EAAQC,EAAUE,eC1CrDC,EATL,WAEL,OACE,8BACE,cAAC,EAAD,OCJTC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.fbc4014a.chunk.js","sourcesContent":["import React, {useState, useEffect, useRef} from 'react';\r\n\r\nconst TodoForm=(props)=>{\r\n\r\n    const inputRef= useRef(null);\r\n\r\n    useEffect(()=>{\r\n         inputRef.current.focus();\r\n    })\r\n    const [todo,setTodo]= useState(props.edit? props.edit.text: '');\r\n\r\n    const inputChangeHandler=(e)=>{\r\n        setTodo(e.target.value);\r\n    }\r\n    const submitHandler=(e)=>{\r\n        e.preventDefault();\r\n        props.onAddingTodo({\r\n            id: Math.random(),\r\n            text: todo.trim(),\r\n        })\r\n        if(props.checkIfUpdate=='0')\r\n        {setTodo('');}\r\n    }\r\n    return(\r\n        <form className=\"todo-form\" onSubmit={submitHandler}>\r\n          <input type=\"text\" placeholder={props.placeholder} onChange={inputChangeHandler} value={todo} className=\"todo-input\" ref={inputRef}></input>\r\n          <button className=\"todo-button\">{props.buttonContent}</button>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default TodoForm;","import React,{ useState } from 'react';\r\nimport {RiCloseCircleLine} from 'react-icons/ri';\r\nimport {TiEdit} from 'react-icons/ti';\r\nimport TodoForm from './TodoForm';\r\n\r\nconst Todo=(props)=>{\r\n\r\n    const [edit,setEdit]=useState({\r\n        id: null,\r\n        text: '',\r\n    })\r\n    const submitUpdate=(value)=>{\r\n        props.updateTodo(edit.id,value);\r\n        setEdit({\r\n            id: null,\r\n            text: '',\r\n        })\r\n    }\r\n\r\n    if(edit.id)\r\n    {\r\n        return <TodoForm edit={edit} onAddingTodo={submitUpdate} checkIfUpdate=\"1\" buttonContent=\"Update Todo\" placeholder=\"Update todo...\"/>\r\n    }\r\n     return props.todos.map((todo,index)=>(\r\n         <div className={todo.isComplete ? 'todo-row complete': 'todo-row'} key={index}>\r\n            <div key={todo.id} onClick={()=>props.completeTodo(todo.id)}>\r\n                {todo.text}\r\n            </div>\r\n            <div className=\"icons\">\r\n                <RiCloseCircleLine className=\"delete-icon\" onClick={()=>props.removeTodo(todo.id)}/>\r\n                <TiEdit  className=\"edit-icon\" onClick={()=>setEdit({id: todo.id, text: todo.text})}/>\r\n            </div>\r\n         </div>\r\n     ))\r\n}\r\n\r\nexport default Todo;","import React,{ useState, useEffect } from 'react';\r\nimport TodoForm from './TodoForm';\r\nimport Todo from './Todo';\r\n\r\nconst TodoList=()=>{\r\n\r\n    //function to get Item from Local Storage\r\n    const getItemFromLocalStorage=()=>{\r\n        let lists= localStorage.getItem('lists');\r\n        if(lists)\r\n        {\r\n            return JSON.parse(lists);\r\n        }\r\n        else{\r\n            return [];\r\n        }\r\n    }\r\n    const [todos,setTodos]=useState(getItemFromLocalStorage());\r\n    //Adding the todo\r\n    const AddTodoHandler=(todo)=>{\r\n        if(!todo.text||/^\\s*$/.test(todo.text))\r\n        {\r\n            return;\r\n        }\r\n        //console.log(todo);\r\n        const newTodo=[todo,...todos];\r\n        setTodos(newTodo);\r\n    }\r\n\r\n    //Toggling whether it is complete or not\r\n    const completeTodo=(id)=>{\r\n        let updatedTodos= todos.map(todo=>{\r\n            if(todo.id===id)\r\n            {\r\n                todo.isComplete=!todo.isComplete\r\n            }\r\n            return todo;\r\n        })\r\n\r\n        setTodos(updatedTodos);\r\n    }\r\n\r\n    //Removing a Todo\r\n    const removeTodo=(id)=>{\r\n        const AfterRemovingTodo= [...todos].filter(todo=> todo.id !== id)\r\n        setTodos(AfterRemovingTodo);\r\n    }\r\n\r\n    //Updating a Todo\r\n    const updateTodo=(todoId, newValue)=>{\r\n        if(!newValue.text||/^\\s*$/.test(newValue.text))\r\n        {\r\n            return;\r\n        }\r\n\r\n        setTodos(prev=> prev.map(item=>(item.id===todoId? newValue: item)));\r\n    }\r\n    // storing in Local Storage\r\n    useEffect(()=>{\r\n        localStorage.setItem('lists', JSON.stringify(todos));\r\n    },[todos])\r\n    \r\n    return(\r\n     <div className=\"todo-app\">\r\n          <h1>Todo List üìù</h1>\r\n          <TodoForm onAddingTodo={AddTodoHandler} buttonContent=\"Add Todo\" placeholder=\"Add a Todo...\" checkIfUpdate=\"0\"/>\r\n          <Todo todos={todos} completeTodo={completeTodo} removeTodo={removeTodo} updateTodo={updateTodo}/>\r\n     </div>\r\n    );\r\n}\r\n\r\nexport default TodoList;","import './App.css';\nimport React from 'react';\nimport TodoList from './Components/TodoList';\n\nconst App=()=>{\n\n     return(\n       <div>\n         <TodoList />\n       </div>\n     )\n}\n\nexport default App;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}